#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3623
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace KDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="KQ")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblGroup(tblGroup instance);
    partial void UpdatetblGroup(tblGroup instance);
    partial void DeletetblGroup(tblGroup instance);
    partial void InserttblLeave(tblLeave instance);
    partial void UpdatetblLeave(tblLeave instance);
    partial void DeletetblLeave(tblLeave instance);
    partial void InserttblPerson(tblPerson instance);
    partial void UpdatetblPerson(tblPerson instance);
    partial void DeletetblPerson(tblPerson instance);
    partial void InserttblTimeDefine(tblTimeDefine instance);
    partial void UpdatetblTimeDefine(tblTimeDefine instance);
    partial void DeletetblTimeDefine(tblTimeDefine instance);
    partial void InserttblTM(tblTM instance);
    partial void UpdatetblTM(tblTM instance);
    partial void DeletetblTM(tblTM instance);
    partial void InserttblTmData(tblTmData instance);
    partial void UpdatetblTmData(tblTmData instance);
    partial void DeletetblTmData(tblTmData instance);
    partial void InserttblWorkDefine(tblWorkDefine instance);
    partial void UpdatetblWorkDefine(tblWorkDefine instance);
    partial void DeletetblWorkDefine(tblWorkDefine instance);
    #endregion
		
		public DB() : 
				base(global::KDB.Properties.Settings.Default.KQConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblGroup> tblGroup
		{
			get
			{
				return this.GetTable<tblGroup>();
			}
		}
		
		public System.Data.Linq.Table<tblLeave> tblLeave
		{
			get
			{
				return this.GetTable<tblLeave>();
			}
		}
		
		public System.Data.Linq.Table<tblPerson> tblPerson
		{
			get
			{
				return this.GetTable<tblPerson>();
			}
		}
		
		public System.Data.Linq.Table<tblTimeDefine> tblTimeDefine
		{
			get
			{
				return this.GetTable<tblTimeDefine>();
			}
		}
		
		public System.Data.Linq.Table<tblTM> tblTM
		{
			get
			{
				return this.GetTable<tblTM>();
			}
		}
		
		public System.Data.Linq.Table<tblTmData> tblTmData
		{
			get
			{
				return this.GetTable<tblTmData>();
			}
		}
		
		public System.Data.Linq.Table<tblWorkDefine> tblWorkDefine
		{
			get
			{
				return this.GetTable<tblWorkDefine>();
			}
		}
	}
	
	[Table(Name="dbo.tblGroup")]
	public partial class tblGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private System.Nullable<int> _WorkDefineID;
		
		private EntitySet<tblPerson> _tblPerson;
		
		private EntityRef<tblWorkDefine> _tblWorkDefine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnWorkDefineIDChanging(System.Nullable<int> value);
    partial void OnWorkDefineIDChanged();
    #endregion
		
		public tblGroup()
		{
			this._tblPerson = new EntitySet<tblPerson>(new Action<tblPerson>(this.attach_tblPerson), new Action<tblPerson>(this.detach_tblPerson));
			this._tblWorkDefine = default(EntityRef<tblWorkDefine>);
			OnCreated();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_WorkDefineID", DbType="Int")]
		public System.Nullable<int> WorkDefineID
		{
			get
			{
				return this._WorkDefineID;
			}
			set
			{
				if ((this._WorkDefineID != value))
				{
					if (this._tblWorkDefine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkDefineIDChanging(value);
					this.SendPropertyChanging();
					this._WorkDefineID = value;
					this.SendPropertyChanged("WorkDefineID");
					this.OnWorkDefineIDChanged();
				}
			}
		}
		
		[Association(Name="tblGroup_tblPerson", Storage="_tblPerson", OtherKey="GroupID")]
		public EntitySet<tblPerson> tblPerson
		{
			get
			{
				return this._tblPerson;
			}
			set
			{
				this._tblPerson.Assign(value);
			}
		}
		
		[Association(Name="tblWorkDefine_tblGroup", Storage="_tblWorkDefine", ThisKey="WorkDefineID", IsForeignKey=true)]
		public tblWorkDefine tblWorkDefine
		{
			get
			{
				return this._tblWorkDefine.Entity;
			}
			set
			{
				tblWorkDefine previousValue = this._tblWorkDefine.Entity;
				if (((previousValue != value) 
							|| (this._tblWorkDefine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblWorkDefine.Entity = null;
						previousValue.tblGroup.Remove(this);
					}
					this._tblWorkDefine.Entity = value;
					if ((value != null))
					{
						value.tblGroup.Add(this);
						this._WorkDefineID = value.WorkDefineID;
					}
					else
					{
						this._WorkDefineID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblWorkDefine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPerson(tblPerson entity)
		{
			this.SendPropertyChanging();
			entity.tblGroup = this;
		}
		
		private void detach_tblPerson(tblPerson entity)
		{
			this.SendPropertyChanging();
			entity.tblGroup = null;
		}
	}
	
	[Table(Name="dbo.tblLeave")]
	public partial class tblLeave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeaveID;
		
		private int _LeaveType;
		
		private string _LeaveRemark;
		
		private System.DateTime _LeaveBegin;
		
		private System.DateTime _LeaveEnd;
		
		private int _PersonID;
		
		private EntityRef<tblPerson> _tblPerson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeaveIDChanging(int value);
    partial void OnLeaveIDChanged();
    partial void OnLeaveTypeChanging(int value);
    partial void OnLeaveTypeChanged();
    partial void OnLeaveRemarkChanging(string value);
    partial void OnLeaveRemarkChanged();
    partial void OnLeaveBeginChanging(System.DateTime value);
    partial void OnLeaveBeginChanged();
    partial void OnLeaveEndChanging(System.DateTime value);
    partial void OnLeaveEndChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public tblLeave()
		{
			this._tblPerson = default(EntityRef<tblPerson>);
			OnCreated();
		}
		
		[Column(Storage="_LeaveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeaveID
		{
			get
			{
				return this._LeaveID;
			}
			set
			{
				if ((this._LeaveID != value))
				{
					this.OnLeaveIDChanging(value);
					this.SendPropertyChanging();
					this._LeaveID = value;
					this.SendPropertyChanged("LeaveID");
					this.OnLeaveIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveType", DbType="Int NOT NULL")]
		public int LeaveType
		{
			get
			{
				return this._LeaveType;
			}
			set
			{
				if ((this._LeaveType != value))
				{
					this.OnLeaveTypeChanging(value);
					this.SendPropertyChanging();
					this._LeaveType = value;
					this.SendPropertyChanged("LeaveType");
					this.OnLeaveTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveRemark", DbType="NVarChar(50)")]
		public string LeaveRemark
		{
			get
			{
				return this._LeaveRemark;
			}
			set
			{
				if ((this._LeaveRemark != value))
				{
					this.OnLeaveRemarkChanging(value);
					this.SendPropertyChanging();
					this._LeaveRemark = value;
					this.SendPropertyChanged("LeaveRemark");
					this.OnLeaveRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveBegin", DbType="DateTime NOT NULL")]
		public System.DateTime LeaveBegin
		{
			get
			{
				return this._LeaveBegin;
			}
			set
			{
				if ((this._LeaveBegin != value))
				{
					this.OnLeaveBeginChanging(value);
					this.SendPropertyChanging();
					this._LeaveBegin = value;
					this.SendPropertyChanged("LeaveBegin");
					this.OnLeaveBeginChanged();
				}
			}
		}
		
		[Column(Storage="_LeaveEnd", DbType="DateTime NOT NULL")]
		public System.DateTime LeaveEnd
		{
			get
			{
				return this._LeaveEnd;
			}
			set
			{
				if ((this._LeaveEnd != value))
				{
					this.OnLeaveEndChanging(value);
					this.SendPropertyChanging();
					this._LeaveEnd = value;
					this.SendPropertyChanged("LeaveEnd");
					this.OnLeaveEndChanged();
				}
			}
		}
		
		[Column(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._tblPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Association(Name="tblPerson_tblLeave", Storage="_tblPerson", ThisKey="PersonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblPerson tblPerson
		{
			get
			{
				return this._tblPerson.Entity;
			}
			set
			{
				tblPerson previousValue = this._tblPerson.Entity;
				if (((previousValue != value) 
							|| (this._tblPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPerson.Entity = null;
						previousValue.tblLeave.Remove(this);
					}
					this._tblPerson.Entity = value;
					if ((value != null))
					{
						value.tblLeave.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("tblPerson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblPerson")]
	public partial class tblPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private string _PersonName;
		
		private System.Nullable<int> _GroupID;
		
		private System.Nullable<int> _TmID;
		
		private EntitySet<tblLeave> _tblLeave;
		
		private EntityRef<tblGroup> _tblGroup;
		
		private EntityRef<tblTM> _tblTM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnPersonNameChanging(string value);
    partial void OnPersonNameChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnTmIDChanging(System.Nullable<int> value);
    partial void OnTmIDChanged();
    #endregion
		
		public tblPerson()
		{
			this._tblLeave = new EntitySet<tblLeave>(new Action<tblLeave>(this.attach_tblLeave), new Action<tblLeave>(this.detach_tblLeave));
			this._tblGroup = default(EntityRef<tblGroup>);
			this._tblTM = default(EntityRef<tblTM>);
			OnCreated();
		}
		
		[Column(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_PersonName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonName
		{
			get
			{
				return this._PersonName;
			}
			set
			{
				if ((this._PersonName != value))
				{
					this.OnPersonNameChanging(value);
					this.SendPropertyChanging();
					this._PersonName = value;
					this.SendPropertyChanged("PersonName");
					this.OnPersonNameChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._tblGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_TmID", DbType="Int")]
		public System.Nullable<int> TmID
		{
			get
			{
				return this._TmID;
			}
			set
			{
				if ((this._TmID != value))
				{
					if (this._tblTM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTmIDChanging(value);
					this.SendPropertyChanging();
					this._TmID = value;
					this.SendPropertyChanged("TmID");
					this.OnTmIDChanged();
				}
			}
		}
		
		[Association(Name="tblPerson_tblLeave", Storage="_tblLeave", OtherKey="PersonID")]
		public EntitySet<tblLeave> tblLeave
		{
			get
			{
				return this._tblLeave;
			}
			set
			{
				this._tblLeave.Assign(value);
			}
		}
		
		[Association(Name="tblGroup_tblPerson", Storage="_tblGroup", ThisKey="GroupID", IsForeignKey=true, DeleteRule="CASCADE")]
		public tblGroup tblGroup
		{
			get
			{
				return this._tblGroup.Entity;
			}
			set
			{
				tblGroup previousValue = this._tblGroup.Entity;
				if (((previousValue != value) 
							|| (this._tblGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblGroup.Entity = null;
						previousValue.tblPerson.Remove(this);
					}
					this._tblGroup.Entity = value;
					if ((value != null))
					{
						value.tblPerson.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblGroup");
				}
			}
		}
		
		[Association(Name="tblTM_tblPerson", Storage="_tblTM", ThisKey="TmID", IsForeignKey=true)]
		public tblTM tblTM
		{
			get
			{
				return this._tblTM.Entity;
			}
			set
			{
				tblTM previousValue = this._tblTM.Entity;
				if (((previousValue != value) 
							|| (this._tblTM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTM.Entity = null;
						previousValue.tblPerson.Remove(this);
					}
					this._tblTM.Entity = value;
					if ((value != null))
					{
						value.tblPerson.Add(this);
						this._TmID = value.TmID;
					}
					else
					{
						this._TmID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblTM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblLeave(tblLeave entity)
		{
			this.SendPropertyChanging();
			entity.tblPerson = this;
		}
		
		private void detach_tblLeave(tblLeave entity)
		{
			this.SendPropertyChanging();
			entity.tblPerson = null;
		}
	}
	
	[Table(Name="dbo.tblTimeDefine")]
	public partial class tblTimeDefine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeDefineID;
		
		private string _StartTime;
		
		private string _EndTime;
		
		private int _DayOffset;
		
		private bool _IsCrossDay;
		
		private int _WorkDefineID;
		
		private EntityRef<tblWorkDefine> _tblWorkDefine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeDefineIDChanging(int value);
    partial void OnTimeDefineIDChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnDayOffsetChanging(int value);
    partial void OnDayOffsetChanged();
    partial void OnIsCrossDayChanging(bool value);
    partial void OnIsCrossDayChanged();
    partial void OnWorkDefineIDChanging(int value);
    partial void OnWorkDefineIDChanged();
    #endregion
		
		public tblTimeDefine()
		{
			this._tblWorkDefine = default(EntityRef<tblWorkDefine>);
			OnCreated();
		}
		
		[Column(Storage="_TimeDefineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeDefineID
		{
			get
			{
				return this._TimeDefineID;
			}
			set
			{
				if ((this._TimeDefineID != value))
				{
					this.OnTimeDefineIDChanging(value);
					this.SendPropertyChanging();
					this._TimeDefineID = value;
					this.SendPropertyChanged("TimeDefineID");
					this.OnTimeDefineIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_DayOffset", DbType="Int NOT NULL")]
		public int DayOffset
		{
			get
			{
				return this._DayOffset;
			}
			set
			{
				if ((this._DayOffset != value))
				{
					this.OnDayOffsetChanging(value);
					this.SendPropertyChanging();
					this._DayOffset = value;
					this.SendPropertyChanged("DayOffset");
					this.OnDayOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_IsCrossDay", DbType="Bit NOT NULL")]
		public bool IsCrossDay
		{
			get
			{
				return this._IsCrossDay;
			}
			set
			{
				if ((this._IsCrossDay != value))
				{
					this.OnIsCrossDayChanging(value);
					this.SendPropertyChanging();
					this._IsCrossDay = value;
					this.SendPropertyChanged("IsCrossDay");
					this.OnIsCrossDayChanged();
				}
			}
		}
		
		[Column(Storage="_WorkDefineID", DbType="Int NOT NULL")]
		public int WorkDefineID
		{
			get
			{
				return this._WorkDefineID;
			}
			set
			{
				if ((this._WorkDefineID != value))
				{
					if (this._tblWorkDefine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkDefineIDChanging(value);
					this.SendPropertyChanging();
					this._WorkDefineID = value;
					this.SendPropertyChanged("WorkDefineID");
					this.OnWorkDefineIDChanged();
				}
			}
		}
		
		[Association(Name="tblWorkDefine_tblTimeDefine", Storage="_tblWorkDefine", ThisKey="WorkDefineID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblWorkDefine tblWorkDefine
		{
			get
			{
				return this._tblWorkDefine.Entity;
			}
			set
			{
				tblWorkDefine previousValue = this._tblWorkDefine.Entity;
				if (((previousValue != value) 
							|| (this._tblWorkDefine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblWorkDefine.Entity = null;
						previousValue.tblTimeDefine.Remove(this);
					}
					this._tblWorkDefine.Entity = value;
					if ((value != null))
					{
						value.tblTimeDefine.Add(this);
						this._WorkDefineID = value.WorkDefineID;
					}
					else
					{
						this._WorkDefineID = default(int);
					}
					this.SendPropertyChanged("tblWorkDefine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblTM")]
	public partial class tblTM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TmID;
		
		private string _TmSN;
		
		private EntitySet<tblPerson> _tblPerson;
		
		private EntitySet<tblTmData> _tblTmData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTmIDChanging(int value);
    partial void OnTmIDChanged();
    partial void OnTmSNChanging(string value);
    partial void OnTmSNChanged();
    #endregion
		
		public tblTM()
		{
			this._tblPerson = new EntitySet<tblPerson>(new Action<tblPerson>(this.attach_tblPerson), new Action<tblPerson>(this.detach_tblPerson));
			this._tblTmData = new EntitySet<tblTmData>(new Action<tblTmData>(this.attach_tblTmData), new Action<tblTmData>(this.detach_tblTmData));
			OnCreated();
		}
		
		[Column(Storage="_TmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TmID
		{
			get
			{
				return this._TmID;
			}
			set
			{
				if ((this._TmID != value))
				{
					this.OnTmIDChanging(value);
					this.SendPropertyChanging();
					this._TmID = value;
					this.SendPropertyChanged("TmID");
					this.OnTmIDChanged();
				}
			}
		}
		
		[Column(Storage="_TmSN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TmSN
		{
			get
			{
				return this._TmSN;
			}
			set
			{
				if ((this._TmSN != value))
				{
					this.OnTmSNChanging(value);
					this.SendPropertyChanging();
					this._TmSN = value;
					this.SendPropertyChanged("TmSN");
					this.OnTmSNChanged();
				}
			}
		}
		
		[Association(Name="tblTM_tblPerson", Storage="_tblPerson", OtherKey="TmID")]
		public EntitySet<tblPerson> tblPerson
		{
			get
			{
				return this._tblPerson;
			}
			set
			{
				this._tblPerson.Assign(value);
			}
		}
		
		[Association(Name="tblTM_tblTmData", Storage="_tblTmData", OtherKey="TmID")]
		public EntitySet<tblTmData> tblTmData
		{
			get
			{
				return this._tblTmData;
			}
			set
			{
				this._tblTmData.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPerson(tblPerson entity)
		{
			this.SendPropertyChanging();
			entity.tblTM = this;
		}
		
		private void detach_tblPerson(tblPerson entity)
		{
			this.SendPropertyChanging();
			entity.tblTM = null;
		}
		
		private void attach_tblTmData(tblTmData entity)
		{
			this.SendPropertyChanging();
			entity.tblTM = this;
		}
		
		private void detach_tblTmData(tblTmData entity)
		{
			this.SendPropertyChanging();
			entity.tblTM = null;
		}
	}
	
	[Table(Name="dbo.tblTmData")]
	public partial class tblTmData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TmDataID;
		
		private int _TmID;
		
		private System.DateTime _TmDataDT;
		
		private EntityRef<tblTM> _tblTM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTmDataIDChanging(int value);
    partial void OnTmDataIDChanged();
    partial void OnTmIDChanging(int value);
    partial void OnTmIDChanged();
    partial void OnTmDataDTChanging(System.DateTime value);
    partial void OnTmDataDTChanged();
    #endregion
		
		public tblTmData()
		{
			this._tblTM = default(EntityRef<tblTM>);
			OnCreated();
		}
		
		[Column(Storage="_TmDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TmDataID
		{
			get
			{
				return this._TmDataID;
			}
			set
			{
				if ((this._TmDataID != value))
				{
					this.OnTmDataIDChanging(value);
					this.SendPropertyChanging();
					this._TmDataID = value;
					this.SendPropertyChanged("TmDataID");
					this.OnTmDataIDChanged();
				}
			}
		}
		
		[Column(Storage="_TmID", DbType="Int NOT NULL")]
		public int TmID
		{
			get
			{
				return this._TmID;
			}
			set
			{
				if ((this._TmID != value))
				{
					if (this._tblTM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTmIDChanging(value);
					this.SendPropertyChanging();
					this._TmID = value;
					this.SendPropertyChanged("TmID");
					this.OnTmIDChanged();
				}
			}
		}
		
		[Column(Storage="_TmDataDT", DbType="DateTime NOT NULL")]
		public System.DateTime TmDataDT
		{
			get
			{
				return this._TmDataDT;
			}
			set
			{
				if ((this._TmDataDT != value))
				{
					this.OnTmDataDTChanging(value);
					this.SendPropertyChanging();
					this._TmDataDT = value;
					this.SendPropertyChanged("TmDataDT");
					this.OnTmDataDTChanged();
				}
			}
		}
		
		[Association(Name="tblTM_tblTmData", Storage="_tblTM", ThisKey="TmID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblTM tblTM
		{
			get
			{
				return this._tblTM.Entity;
			}
			set
			{
				tblTM previousValue = this._tblTM.Entity;
				if (((previousValue != value) 
							|| (this._tblTM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTM.Entity = null;
						previousValue.tblTmData.Remove(this);
					}
					this._tblTM.Entity = value;
					if ((value != null))
					{
						value.tblTmData.Add(this);
						this._TmID = value.TmID;
					}
					else
					{
						this._TmID = default(int);
					}
					this.SendPropertyChanged("tblTM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblWorkDefine")]
	public partial class tblWorkDefine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkDefineID;
		
		private string _WorkDefineName;
		
		private string _WorkDefineStart;
		
		private int _WorkDefineDayOfCycle;
		
		private EntitySet<tblGroup> _tblGroup;
		
		private EntitySet<tblTimeDefine> _tblTimeDefine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkDefineIDChanging(int value);
    partial void OnWorkDefineIDChanged();
    partial void OnWorkDefineNameChanging(string value);
    partial void OnWorkDefineNameChanged();
    partial void OnWorkDefineStartChanging(string value);
    partial void OnWorkDefineStartChanged();
    partial void OnWorkDefineDayOfCycleChanging(int value);
    partial void OnWorkDefineDayOfCycleChanged();
    #endregion
		
		public tblWorkDefine()
		{
			this._tblGroup = new EntitySet<tblGroup>(new Action<tblGroup>(this.attach_tblGroup), new Action<tblGroup>(this.detach_tblGroup));
			this._tblTimeDefine = new EntitySet<tblTimeDefine>(new Action<tblTimeDefine>(this.attach_tblTimeDefine), new Action<tblTimeDefine>(this.detach_tblTimeDefine));
			OnCreated();
		}
		
		[Column(Storage="_WorkDefineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkDefineID
		{
			get
			{
				return this._WorkDefineID;
			}
			set
			{
				if ((this._WorkDefineID != value))
				{
					this.OnWorkDefineIDChanging(value);
					this.SendPropertyChanging();
					this._WorkDefineID = value;
					this.SendPropertyChanged("WorkDefineID");
					this.OnWorkDefineIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkDefineName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WorkDefineName
		{
			get
			{
				return this._WorkDefineName;
			}
			set
			{
				if ((this._WorkDefineName != value))
				{
					this.OnWorkDefineNameChanging(value);
					this.SendPropertyChanging();
					this._WorkDefineName = value;
					this.SendPropertyChanged("WorkDefineName");
					this.OnWorkDefineNameChanged();
				}
			}
		}
		
		[Column(Storage="_WorkDefineStart", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WorkDefineStart
		{
			get
			{
				return this._WorkDefineStart;
			}
			set
			{
				if ((this._WorkDefineStart != value))
				{
					this.OnWorkDefineStartChanging(value);
					this.SendPropertyChanging();
					this._WorkDefineStart = value;
					this.SendPropertyChanged("WorkDefineStart");
					this.OnWorkDefineStartChanged();
				}
			}
		}
		
		[Column(Storage="_WorkDefineDayOfCycle", DbType="Int NOT NULL")]
		public int WorkDefineDayOfCycle
		{
			get
			{
				return this._WorkDefineDayOfCycle;
			}
			set
			{
				if ((this._WorkDefineDayOfCycle != value))
				{
					this.OnWorkDefineDayOfCycleChanging(value);
					this.SendPropertyChanging();
					this._WorkDefineDayOfCycle = value;
					this.SendPropertyChanged("WorkDefineDayOfCycle");
					this.OnWorkDefineDayOfCycleChanged();
				}
			}
		}
		
		[Association(Name="tblWorkDefine_tblGroup", Storage="_tblGroup", OtherKey="WorkDefineID")]
		public EntitySet<tblGroup> tblGroup
		{
			get
			{
				return this._tblGroup;
			}
			set
			{
				this._tblGroup.Assign(value);
			}
		}
		
		[Association(Name="tblWorkDefine_tblTimeDefine", Storage="_tblTimeDefine", OtherKey="WorkDefineID")]
		public EntitySet<tblTimeDefine> tblTimeDefine
		{
			get
			{
				return this._tblTimeDefine;
			}
			set
			{
				this._tblTimeDefine.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblGroup(tblGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblWorkDefine = this;
		}
		
		private void detach_tblGroup(tblGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblWorkDefine = null;
		}
		
		private void attach_tblTimeDefine(tblTimeDefine entity)
		{
			this.SendPropertyChanging();
			entity.tblWorkDefine = this;
		}
		
		private void detach_tblTimeDefine(tblTimeDefine entity)
		{
			this.SendPropertyChanging();
			entity.tblWorkDefine = null;
		}
	}
}
#pragma warning restore 1591
