#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3623
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace BXDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="fnbaoxiu")]
	public partial class BxdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblRight(tblRight instance);
    partial void UpdatetblRight(tblRight instance);
    partial void DeletetblRight(tblRight instance);
    partial void InserttblMaintainLevel(tblMaintainLevel instance);
    partial void UpdatetblMaintainLevel(tblMaintainLevel instance);
    partial void DeletetblMaintainLevel(tblMaintainLevel instance);
    partial void InserttblOperator(tblOperator instance);
    partial void UpdatetblOperator(tblOperator instance);
    partial void DeletetblOperator(tblOperator instance);
    partial void InserttblReceive(tblReceive instance);
    partial void UpdatetblReceive(tblReceive instance);
    partial void DeletetblReceive(tblReceive instance);
    partial void InserttblReply(tblReply instance);
    partial void UpdatetblReply(tblReply instance);
    partial void DeletetblReply(tblReply instance);
    partial void InserttblIntroducer(tblIntroducer instance);
    partial void UpdatetblIntroducer(tblIntroducer instance);
    partial void DeletetblIntroducer(tblIntroducer instance);
    partial void InserttblFlow(tblFlow instance);
    partial void UpdatetblFlow(tblFlow instance);
    partial void DeletetblFlow(tblFlow instance);
    partial void InserttblMaintain(tblMaintain instance);
    partial void UpdatetblMaintain(tblMaintain instance);
    partial void DeletetblMaintain(tblMaintain instance);
    #endregion
		
		public BxdbDataContext() : 
				base(global::BXDB.Properties.Settings.Default.fnbaoxiuConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BxdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BxdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BxdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BxdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblRight> tblRight
		{
			get
			{
				return this.GetTable<tblRight>();
			}
		}
		
		public System.Data.Linq.Table<tblMaintainLevel> tblMaintainLevel
		{
			get
			{
				return this.GetTable<tblMaintainLevel>();
			}
		}
		
		public System.Data.Linq.Table<tblOperator> tblOperator
		{
			get
			{
				return this.GetTable<tblOperator>();
			}
		}
		
		public System.Data.Linq.Table<tblReceive> tblReceive
		{
			get
			{
				return this.GetTable<tblReceive>();
			}
		}
		
		public System.Data.Linq.Table<tblReply> tblReply
		{
			get
			{
				return this.GetTable<tblReply>();
			}
		}
		
		public System.Data.Linq.Table<tblIntroducer> tblIntroducer
		{
			get
			{
				return this.GetTable<tblIntroducer>();
			}
		}
		
		public System.Data.Linq.Table<tblFlow> tblFlow
		{
			get
			{
				return this.GetTable<tblFlow>();
			}
		}
		
		public System.Data.Linq.Table<tblMaintain> tblMaintain
		{
			get
			{
				return this.GetTable<tblMaintain>();
			}
		}
	}
	
	[Table(Name="dbo.tblRight")]
	public partial class tblRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rt_id;
		
		private int _rt_value;
		
		private EntitySet<tblOperator> _tblOperator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrt_idChanging(int value);
    partial void Onrt_idChanged();
    partial void Onrt_valueChanging(int value);
    partial void Onrt_valueChanged();
    #endregion
		
		public tblRight()
		{
			this._tblOperator = new EntitySet<tblOperator>(new Action<tblOperator>(this.attach_tblOperator), new Action<tblOperator>(this.detach_tblOperator));
			OnCreated();
		}
		
		[Column(Storage="_rt_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rt_id
		{
			get
			{
				return this._rt_id;
			}
			set
			{
				if ((this._rt_id != value))
				{
					this.Onrt_idChanging(value);
					this.SendPropertyChanging();
					this._rt_id = value;
					this.SendPropertyChanged("rt_id");
					this.Onrt_idChanged();
				}
			}
		}
		
		[Column(Storage="_rt_value", DbType="Int NOT NULL")]
		public int rt_value
		{
			get
			{
				return this._rt_value;
			}
			set
			{
				if ((this._rt_value != value))
				{
					this.Onrt_valueChanging(value);
					this.SendPropertyChanging();
					this._rt_value = value;
					this.SendPropertyChanged("rt_value");
					this.Onrt_valueChanged();
				}
			}
		}
		
		[Association(Name="tblRight_tblOperator", Storage="_tblOperator", OtherKey="rt_id")]
		public EntitySet<tblOperator> tblOperator
		{
			get
			{
				return this._tblOperator;
			}
			set
			{
				this._tblOperator.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblOperator(tblOperator entity)
		{
			this.SendPropertyChanging();
			entity.tblRight = this;
		}
		
		private void detach_tblOperator(tblOperator entity)
		{
			this.SendPropertyChanging();
			entity.tblRight = null;
		}
	}
	
	[Table(Name="dbo.tblMaintainLevel")]
	public partial class tblMaintainLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ml_id;
		
		private string _ml_name;
		
		private System.Nullable<int> _ml_arrive_ll;
		
		private System.Nullable<int> _ml_arrive_hl;
		
		private System.Nullable<int> _ml_reply_hl;
		
		private string _ml_remark;
		
		private System.Nullable<int> _ml_number;
		
		private EntitySet<tblMaintain> _tblMaintain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onml_idChanging(int value);
    partial void Onml_idChanged();
    partial void Onml_nameChanging(string value);
    partial void Onml_nameChanged();
    partial void Onml_arrive_llChanging(System.Nullable<int> value);
    partial void Onml_arrive_llChanged();
    partial void Onml_arrive_hlChanging(System.Nullable<int> value);
    partial void Onml_arrive_hlChanged();
    partial void Onml_reply_hlChanging(System.Nullable<int> value);
    partial void Onml_reply_hlChanged();
    partial void Onml_remarkChanging(string value);
    partial void Onml_remarkChanged();
    partial void Onml_numberChanging(System.Nullable<int> value);
    partial void Onml_numberChanged();
    #endregion
		
		public tblMaintainLevel()
		{
			this._tblMaintain = new EntitySet<tblMaintain>(new Action<tblMaintain>(this.attach_tblMaintain), new Action<tblMaintain>(this.detach_tblMaintain));
			OnCreated();
		}
		
		[Column(Storage="_ml_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ml_id
		{
			get
			{
				return this._ml_id;
			}
			set
			{
				if ((this._ml_id != value))
				{
					this.Onml_idChanging(value);
					this.SendPropertyChanging();
					this._ml_id = value;
					this.SendPropertyChanged("ml_id");
					this.Onml_idChanged();
				}
			}
		}
		
		[Column(Storage="_ml_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ml_name
		{
			get
			{
				return this._ml_name;
			}
			set
			{
				if ((this._ml_name != value))
				{
					this.Onml_nameChanging(value);
					this.SendPropertyChanging();
					this._ml_name = value;
					this.SendPropertyChanged("ml_name");
					this.Onml_nameChanged();
				}
			}
		}
		
		[Column(Storage="_ml_arrive_ll", DbType="Int")]
		public System.Nullable<int> ml_arrive_ll
		{
			get
			{
				return this._ml_arrive_ll;
			}
			set
			{
				if ((this._ml_arrive_ll != value))
				{
					this.Onml_arrive_llChanging(value);
					this.SendPropertyChanging();
					this._ml_arrive_ll = value;
					this.SendPropertyChanged("ml_arrive_ll");
					this.Onml_arrive_llChanged();
				}
			}
		}
		
		[Column(Storage="_ml_arrive_hl", DbType="Int")]
		public System.Nullable<int> ml_arrive_hl
		{
			get
			{
				return this._ml_arrive_hl;
			}
			set
			{
				if ((this._ml_arrive_hl != value))
				{
					this.Onml_arrive_hlChanging(value);
					this.SendPropertyChanging();
					this._ml_arrive_hl = value;
					this.SendPropertyChanged("ml_arrive_hl");
					this.Onml_arrive_hlChanged();
				}
			}
		}
		
		[Column(Storage="_ml_reply_hl", DbType="Int")]
		public System.Nullable<int> ml_reply_hl
		{
			get
			{
				return this._ml_reply_hl;
			}
			set
			{
				if ((this._ml_reply_hl != value))
				{
					this.Onml_reply_hlChanging(value);
					this.SendPropertyChanging();
					this._ml_reply_hl = value;
					this.SendPropertyChanged("ml_reply_hl");
					this.Onml_reply_hlChanged();
				}
			}
		}
		
		[Column(Storage="_ml_remark", DbType="NVarChar(1000)")]
		public string ml_remark
		{
			get
			{
				return this._ml_remark;
			}
			set
			{
				if ((this._ml_remark != value))
				{
					this.Onml_remarkChanging(value);
					this.SendPropertyChanging();
					this._ml_remark = value;
					this.SendPropertyChanged("ml_remark");
					this.Onml_remarkChanged();
				}
			}
		}
		
		[Column(Storage="_ml_number", DbType="Int")]
		public System.Nullable<int> ml_number
		{
			get
			{
				return this._ml_number;
			}
			set
			{
				if ((this._ml_number != value))
				{
					this.Onml_numberChanging(value);
					this.SendPropertyChanging();
					this._ml_number = value;
					this.SendPropertyChanged("ml_number");
					this.Onml_numberChanged();
				}
			}
		}
		
		[Association(Name="tblMaintainLevel_tblMaintain", Storage="_tblMaintain", OtherKey="ml_id")]
		public EntitySet<tblMaintain> tblMaintain
		{
			get
			{
				return this._tblMaintain;
			}
			set
			{
				this._tblMaintain.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblMaintain(tblMaintain entity)
		{
			this.SendPropertyChanging();
			entity.tblMaintainLevel = this;
		}
		
		private void detach_tblMaintain(tblMaintain entity)
		{
			this.SendPropertyChanging();
			entity.tblMaintainLevel = null;
		}
	}
	
	[Table(Name="dbo.tblOperator")]
	public partial class tblOperator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _op_id;
		
		private string _op_name;
		
		private System.Nullable<int> _rt_id;
		
		private string _op_pwd;
		
		private EntitySet<tblReceive> _tblReceive;
		
		private EntitySet<tblReply> _tblReply;
		
		private EntitySet<tblMaintain> _tblMaintain;
		
		private EntityRef<tblRight> _tblRight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onop_idChanging(int value);
    partial void Onop_idChanged();
    partial void Onop_nameChanging(string value);
    partial void Onop_nameChanged();
    partial void Onrt_idChanging(System.Nullable<int> value);
    partial void Onrt_idChanged();
    partial void Onop_pwdChanging(string value);
    partial void Onop_pwdChanged();
    #endregion
		
		public tblOperator()
		{
			this._tblReceive = new EntitySet<tblReceive>(new Action<tblReceive>(this.attach_tblReceive), new Action<tblReceive>(this.detach_tblReceive));
			this._tblReply = new EntitySet<tblReply>(new Action<tblReply>(this.attach_tblReply), new Action<tblReply>(this.detach_tblReply));
			this._tblMaintain = new EntitySet<tblMaintain>(new Action<tblMaintain>(this.attach_tblMaintain), new Action<tblMaintain>(this.detach_tblMaintain));
			this._tblRight = default(EntityRef<tblRight>);
			OnCreated();
		}
		
		[Column(Storage="_op_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int op_id
		{
			get
			{
				return this._op_id;
			}
			set
			{
				if ((this._op_id != value))
				{
					this.Onop_idChanging(value);
					this.SendPropertyChanging();
					this._op_id = value;
					this.SendPropertyChanged("op_id");
					this.Onop_idChanged();
				}
			}
		}
		
		[Column(Storage="_op_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string op_name
		{
			get
			{
				return this._op_name;
			}
			set
			{
				if ((this._op_name != value))
				{
					this.Onop_nameChanging(value);
					this.SendPropertyChanging();
					this._op_name = value;
					this.SendPropertyChanged("op_name");
					this.Onop_nameChanged();
				}
			}
		}
		
		[Column(Storage="_rt_id", DbType="Int")]
		public System.Nullable<int> rt_id
		{
			get
			{
				return this._rt_id;
			}
			set
			{
				if ((this._rt_id != value))
				{
					if (this._tblRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrt_idChanging(value);
					this.SendPropertyChanging();
					this._rt_id = value;
					this.SendPropertyChanged("rt_id");
					this.Onrt_idChanged();
				}
			}
		}
		
		[Column(Storage="_op_pwd", DbType="NVarChar(200)")]
		public string op_pwd
		{
			get
			{
				return this._op_pwd;
			}
			set
			{
				if ((this._op_pwd != value))
				{
					this.Onop_pwdChanging(value);
					this.SendPropertyChanging();
					this._op_pwd = value;
					this.SendPropertyChanged("op_pwd");
					this.Onop_pwdChanged();
				}
			}
		}
		
		[Association(Name="tblOperator_tblReceive", Storage="_tblReceive", OtherKey="op_id")]
		public EntitySet<tblReceive> tblReceive
		{
			get
			{
				return this._tblReceive;
			}
			set
			{
				this._tblReceive.Assign(value);
			}
		}
		
		[Association(Name="tblOperator_tblReply", Storage="_tblReply", OtherKey="op_id")]
		public EntitySet<tblReply> tblReply
		{
			get
			{
				return this._tblReply;
			}
			set
			{
				this._tblReply.Assign(value);
			}
		}
		
		[Association(Name="tblOperator_tblMaintain", Storage="_tblMaintain", OtherKey="op_id")]
		public EntitySet<tblMaintain> tblMaintain
		{
			get
			{
				return this._tblMaintain;
			}
			set
			{
				this._tblMaintain.Assign(value);
			}
		}
		
		[Association(Name="tblRight_tblOperator", Storage="_tblRight", ThisKey="rt_id", IsForeignKey=true)]
		public tblRight tblRight
		{
			get
			{
				return this._tblRight.Entity;
			}
			set
			{
				tblRight previousValue = this._tblRight.Entity;
				if (((previousValue != value) 
							|| (this._tblRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRight.Entity = null;
						previousValue.tblOperator.Remove(this);
					}
					this._tblRight.Entity = value;
					if ((value != null))
					{
						value.tblOperator.Add(this);
						this._rt_id = value.rt_id;
					}
					else
					{
						this._rt_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblRight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblReceive(tblReceive entity)
		{
			this.SendPropertyChanging();
			entity.tblOperator = this;
		}
		
		private void detach_tblReceive(tblReceive entity)
		{
			this.SendPropertyChanging();
			entity.tblOperator = null;
		}
		
		private void attach_tblReply(tblReply entity)
		{
			this.SendPropertyChanging();
			entity.tblOperator = this;
		}
		
		private void detach_tblReply(tblReply entity)
		{
			this.SendPropertyChanging();
			entity.tblOperator = null;
		}
		
		private void attach_tblMaintain(tblMaintain entity)
		{
			this.SendPropertyChanging();
			entity.tblOperator = this;
		}
		
		private void detach_tblMaintain(tblMaintain entity)
		{
			this.SendPropertyChanging();
			entity.tblOperator = null;
		}
	}
	
	[Table(Name="dbo.tblReceive")]
	public partial class tblReceive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rc_id;
		
		private System.DateTime _rc_dt;
		
		private int _op_id;
		
		private EntitySet<tblFlow> _tblFlow;
		
		private EntityRef<tblOperator> _tblOperator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrc_idChanging(int value);
    partial void Onrc_idChanged();
    partial void Onrc_dtChanging(System.DateTime value);
    partial void Onrc_dtChanged();
    partial void Onop_idChanging(int value);
    partial void Onop_idChanged();
    #endregion
		
		public tblReceive()
		{
			this._tblFlow = new EntitySet<tblFlow>(new Action<tblFlow>(this.attach_tblFlow), new Action<tblFlow>(this.detach_tblFlow));
			this._tblOperator = default(EntityRef<tblOperator>);
			OnCreated();
		}
		
		[Column(Storage="_rc_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rc_id
		{
			get
			{
				return this._rc_id;
			}
			set
			{
				if ((this._rc_id != value))
				{
					this.Onrc_idChanging(value);
					this.SendPropertyChanging();
					this._rc_id = value;
					this.SendPropertyChanged("rc_id");
					this.Onrc_idChanged();
				}
			}
		}
		
		[Column(Storage="_rc_dt", DbType="DateTime NOT NULL")]
		public System.DateTime rc_dt
		{
			get
			{
				return this._rc_dt;
			}
			set
			{
				if ((this._rc_dt != value))
				{
					this.Onrc_dtChanging(value);
					this.SendPropertyChanging();
					this._rc_dt = value;
					this.SendPropertyChanged("rc_dt");
					this.Onrc_dtChanged();
				}
			}
		}
		
		[Column(Storage="_op_id", DbType="Int NOT NULL")]
		public int op_id
		{
			get
			{
				return this._op_id;
			}
			set
			{
				if ((this._op_id != value))
				{
					if (this._tblOperator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onop_idChanging(value);
					this.SendPropertyChanging();
					this._op_id = value;
					this.SendPropertyChanged("op_id");
					this.Onop_idChanged();
				}
			}
		}
		
		[Association(Name="tblReceive_tblFlow", Storage="_tblFlow", OtherKey="rc_id")]
		public EntitySet<tblFlow> tblFlow
		{
			get
			{
				return this._tblFlow;
			}
			set
			{
				this._tblFlow.Assign(value);
			}
		}
		
		[Association(Name="tblOperator_tblReceive", Storage="_tblOperator", ThisKey="op_id", IsForeignKey=true)]
		public tblOperator tblOperator
		{
			get
			{
				return this._tblOperator.Entity;
			}
			set
			{
				tblOperator previousValue = this._tblOperator.Entity;
				if (((previousValue != value) 
							|| (this._tblOperator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblOperator.Entity = null;
						previousValue.tblReceive.Remove(this);
					}
					this._tblOperator.Entity = value;
					if ((value != null))
					{
						value.tblReceive.Add(this);
						this._op_id = value.op_id;
					}
					else
					{
						this._op_id = default(int);
					}
					this.SendPropertyChanged("tblOperator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblReceive = this;
		}
		
		private void detach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblReceive = null;
		}
	}
	
	[Table(Name="dbo.tblReply")]
	public partial class tblReply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rp_id;
		
		private System.Nullable<int> _op_id;
		
		private string _rp_content;
		
		private string _rp_remark;
		
		private System.Nullable<System.DateTime> _rp_end_dt;
		
		private string _rp_worker;
		
		private EntitySet<tblFlow> _tblFlow;
		
		private EntityRef<tblOperator> _tblOperator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrp_idChanging(int value);
    partial void Onrp_idChanged();
    partial void Onop_idChanging(System.Nullable<int> value);
    partial void Onop_idChanged();
    partial void Onrp_contentChanging(string value);
    partial void Onrp_contentChanged();
    partial void Onrp_remarkChanging(string value);
    partial void Onrp_remarkChanged();
    partial void Onrp_end_dtChanging(System.Nullable<System.DateTime> value);
    partial void Onrp_end_dtChanged();
    partial void Onrp_workerChanging(string value);
    partial void Onrp_workerChanged();
    #endregion
		
		public tblReply()
		{
			this._tblFlow = new EntitySet<tblFlow>(new Action<tblFlow>(this.attach_tblFlow), new Action<tblFlow>(this.detach_tblFlow));
			this._tblOperator = default(EntityRef<tblOperator>);
			OnCreated();
		}
		
		[Column(Storage="_rp_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rp_id
		{
			get
			{
				return this._rp_id;
			}
			set
			{
				if ((this._rp_id != value))
				{
					this.Onrp_idChanging(value);
					this.SendPropertyChanging();
					this._rp_id = value;
					this.SendPropertyChanged("rp_id");
					this.Onrp_idChanged();
				}
			}
		}
		
		[Column(Storage="_op_id", DbType="Int")]
		public System.Nullable<int> op_id
		{
			get
			{
				return this._op_id;
			}
			set
			{
				if ((this._op_id != value))
				{
					if (this._tblOperator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onop_idChanging(value);
					this.SendPropertyChanging();
					this._op_id = value;
					this.SendPropertyChanged("op_id");
					this.Onop_idChanged();
				}
			}
		}
		
		[Column(Storage="_rp_content", DbType="NVarChar(1000)")]
		public string rp_content
		{
			get
			{
				return this._rp_content;
			}
			set
			{
				if ((this._rp_content != value))
				{
					this.Onrp_contentChanging(value);
					this.SendPropertyChanging();
					this._rp_content = value;
					this.SendPropertyChanged("rp_content");
					this.Onrp_contentChanged();
				}
			}
		}
		
		[Column(Storage="_rp_remark", DbType="NVarChar(1000)")]
		public string rp_remark
		{
			get
			{
				return this._rp_remark;
			}
			set
			{
				if ((this._rp_remark != value))
				{
					this.Onrp_remarkChanging(value);
					this.SendPropertyChanging();
					this._rp_remark = value;
					this.SendPropertyChanged("rp_remark");
					this.Onrp_remarkChanged();
				}
			}
		}
		
		[Column(Storage="_rp_end_dt", DbType="DateTime")]
		public System.Nullable<System.DateTime> rp_end_dt
		{
			get
			{
				return this._rp_end_dt;
			}
			set
			{
				if ((this._rp_end_dt != value))
				{
					this.Onrp_end_dtChanging(value);
					this.SendPropertyChanging();
					this._rp_end_dt = value;
					this.SendPropertyChanged("rp_end_dt");
					this.Onrp_end_dtChanged();
				}
			}
		}
		
		[Column(Storage="_rp_worker", DbType="NVarChar(100)")]
		public string rp_worker
		{
			get
			{
				return this._rp_worker;
			}
			set
			{
				if ((this._rp_worker != value))
				{
					this.Onrp_workerChanging(value);
					this.SendPropertyChanging();
					this._rp_worker = value;
					this.SendPropertyChanged("rp_worker");
					this.Onrp_workerChanged();
				}
			}
		}
		
		[Association(Name="tblReply_tblFlow", Storage="_tblFlow", OtherKey="rp_id")]
		public EntitySet<tblFlow> tblFlow
		{
			get
			{
				return this._tblFlow;
			}
			set
			{
				this._tblFlow.Assign(value);
			}
		}
		
		[Association(Name="tblOperator_tblReply", Storage="_tblOperator", ThisKey="op_id", IsForeignKey=true)]
		public tblOperator tblOperator
		{
			get
			{
				return this._tblOperator.Entity;
			}
			set
			{
				tblOperator previousValue = this._tblOperator.Entity;
				if (((previousValue != value) 
							|| (this._tblOperator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblOperator.Entity = null;
						previousValue.tblReply.Remove(this);
					}
					this._tblOperator.Entity = value;
					if ((value != null))
					{
						value.tblReply.Add(this);
						this._op_id = value.op_id;
					}
					else
					{
						this._op_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblOperator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblReply = this;
		}
		
		private void detach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblReply = null;
		}
	}
	
	[Table(Name="dbo.tblIntroducer")]
	public partial class tblIntroducer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _it_id;
		
		private string _it_name;
		
		private string _it_address;
		
		private string _it_phone;
		
		private string _it_remark;
		
		private EntitySet<tblFlow> _tblFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onit_idChanging(int value);
    partial void Onit_idChanged();
    partial void Onit_nameChanging(string value);
    partial void Onit_nameChanged();
    partial void Onit_addressChanging(string value);
    partial void Onit_addressChanged();
    partial void Onit_phoneChanging(string value);
    partial void Onit_phoneChanged();
    partial void Onit_remarkChanging(string value);
    partial void Onit_remarkChanged();
    #endregion
		
		public tblIntroducer()
		{
			this._tblFlow = new EntitySet<tblFlow>(new Action<tblFlow>(this.attach_tblFlow), new Action<tblFlow>(this.detach_tblFlow));
			OnCreated();
		}
		
		[Column(Storage="_it_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int it_id
		{
			get
			{
				return this._it_id;
			}
			set
			{
				if ((this._it_id != value))
				{
					this.Onit_idChanging(value);
					this.SendPropertyChanging();
					this._it_id = value;
					this.SendPropertyChanged("it_id");
					this.Onit_idChanged();
				}
			}
		}
		
		[Column(Storage="_it_name", DbType="NVarChar(100)")]
		public string it_name
		{
			get
			{
				return this._it_name;
			}
			set
			{
				if ((this._it_name != value))
				{
					this.Onit_nameChanging(value);
					this.SendPropertyChanging();
					this._it_name = value;
					this.SendPropertyChanged("it_name");
					this.Onit_nameChanged();
				}
			}
		}
		
		[Column(Storage="_it_address", DbType="NVarChar(400)")]
		public string it_address
		{
			get
			{
				return this._it_address;
			}
			set
			{
				if ((this._it_address != value))
				{
					this.Onit_addressChanging(value);
					this.SendPropertyChanging();
					this._it_address = value;
					this.SendPropertyChanged("it_address");
					this.Onit_addressChanged();
				}
			}
		}
		
		[Column(Storage="_it_phone", DbType="NVarChar(200)")]
		public string it_phone
		{
			get
			{
				return this._it_phone;
			}
			set
			{
				if ((this._it_phone != value))
				{
					this.Onit_phoneChanging(value);
					this.SendPropertyChanging();
					this._it_phone = value;
					this.SendPropertyChanged("it_phone");
					this.Onit_phoneChanged();
				}
			}
		}
		
		[Column(Storage="_it_remark", DbType="NVarChar(1000)")]
		public string it_remark
		{
			get
			{
				return this._it_remark;
			}
			set
			{
				if ((this._it_remark != value))
				{
					this.Onit_remarkChanging(value);
					this.SendPropertyChanging();
					this._it_remark = value;
					this.SendPropertyChanged("it_remark");
					this.Onit_remarkChanged();
				}
			}
		}
		
		[Association(Name="tblIntroducer_tblFlow", Storage="_tblFlow", OtherKey="it_id")]
		public EntitySet<tblFlow> tblFlow
		{
			get
			{
				return this._tblFlow;
			}
			set
			{
				this._tblFlow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblIntroducer = this;
		}
		
		private void detach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblIntroducer = null;
		}
	}
	
	[Table(Name="dbo.tblFlow")]
	public partial class tblFlow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fl_id;
		
		private int _it_id;
		
		private System.Nullable<int> _fl_parent;
		
		private System.Nullable<int> _mt_id;
		
		private System.Nullable<int> _rp_id;
		
		private System.Nullable<int> _rc_id;
		
		private int _fl_status;
		
		private EntitySet<tblFlow> _tblFlow2;
		
		private EntityRef<tblFlow> _tblFlow1;
		
		private EntityRef<tblIntroducer> _tblIntroducer;
		
		private EntityRef<tblReceive> _tblReceive;
		
		private EntityRef<tblReply> _tblReply;
		
		private EntityRef<tblMaintain> _tblMaintain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfl_idChanging(int value);
    partial void Onfl_idChanged();
    partial void Onit_idChanging(int value);
    partial void Onit_idChanged();
    partial void Onfl_parentChanging(System.Nullable<int> value);
    partial void Onfl_parentChanged();
    partial void Onmt_idChanging(System.Nullable<int> value);
    partial void Onmt_idChanged();
    partial void Onrp_idChanging(System.Nullable<int> value);
    partial void Onrp_idChanged();
    partial void Onrc_idChanging(System.Nullable<int> value);
    partial void Onrc_idChanged();
    partial void Onfl_statusChanging(int value);
    partial void Onfl_statusChanged();
    #endregion
		
		public tblFlow()
		{
			this._tblFlow2 = new EntitySet<tblFlow>(new Action<tblFlow>(this.attach_tblFlow2), new Action<tblFlow>(this.detach_tblFlow2));
			this._tblFlow1 = default(EntityRef<tblFlow>);
			this._tblIntroducer = default(EntityRef<tblIntroducer>);
			this._tblReceive = default(EntityRef<tblReceive>);
			this._tblReply = default(EntityRef<tblReply>);
			this._tblMaintain = default(EntityRef<tblMaintain>);
			OnCreated();
		}
		
		[Column(Storage="_fl_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fl_id
		{
			get
			{
				return this._fl_id;
			}
			set
			{
				if ((this._fl_id != value))
				{
					this.Onfl_idChanging(value);
					this.SendPropertyChanging();
					this._fl_id = value;
					this.SendPropertyChanged("fl_id");
					this.Onfl_idChanged();
				}
			}
		}
		
		[Column(Storage="_it_id", DbType="Int NOT NULL")]
		public int it_id
		{
			get
			{
				return this._it_id;
			}
			set
			{
				if ((this._it_id != value))
				{
					if (this._tblIntroducer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onit_idChanging(value);
					this.SendPropertyChanging();
					this._it_id = value;
					this.SendPropertyChanged("it_id");
					this.Onit_idChanged();
				}
			}
		}
		
		[Column(Storage="_fl_parent", DbType="Int")]
		public System.Nullable<int> fl_parent
		{
			get
			{
				return this._fl_parent;
			}
			set
			{
				if ((this._fl_parent != value))
				{
					if (this._tblFlow1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfl_parentChanging(value);
					this.SendPropertyChanging();
					this._fl_parent = value;
					this.SendPropertyChanged("fl_parent");
					this.Onfl_parentChanged();
				}
			}
		}
		
		[Column(Storage="_mt_id", DbType="Int")]
		public System.Nullable<int> mt_id
		{
			get
			{
				return this._mt_id;
			}
			set
			{
				if ((this._mt_id != value))
				{
					if (this._tblMaintain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmt_idChanging(value);
					this.SendPropertyChanging();
					this._mt_id = value;
					this.SendPropertyChanged("mt_id");
					this.Onmt_idChanged();
				}
			}
		}
		
		[Column(Storage="_rp_id", DbType="Int")]
		public System.Nullable<int> rp_id
		{
			get
			{
				return this._rp_id;
			}
			set
			{
				if ((this._rp_id != value))
				{
					if (this._tblReply.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrp_idChanging(value);
					this.SendPropertyChanging();
					this._rp_id = value;
					this.SendPropertyChanged("rp_id");
					this.Onrp_idChanged();
				}
			}
		}
		
		[Column(Storage="_rc_id", DbType="Int")]
		public System.Nullable<int> rc_id
		{
			get
			{
				return this._rc_id;
			}
			set
			{
				if ((this._rc_id != value))
				{
					if (this._tblReceive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrc_idChanging(value);
					this.SendPropertyChanging();
					this._rc_id = value;
					this.SendPropertyChanged("rc_id");
					this.Onrc_idChanged();
				}
			}
		}
		
		[Column(Storage="_fl_status", DbType="Int NOT NULL")]
		public int fl_status
		{
			get
			{
				return this._fl_status;
			}
			set
			{
				if ((this._fl_status != value))
				{
					this.Onfl_statusChanging(value);
					this.SendPropertyChanging();
					this._fl_status = value;
					this.SendPropertyChanged("fl_status");
					this.Onfl_statusChanged();
				}
			}
		}
		
		[Association(Name="tblFlow_tblFlow", Storage="_tblFlow2", OtherKey="fl_parent")]
		public EntitySet<tblFlow> tblFlow2
		{
			get
			{
				return this._tblFlow2;
			}
			set
			{
				this._tblFlow2.Assign(value);
			}
		}
		
		[Association(Name="tblFlow_tblFlow", Storage="_tblFlow1", ThisKey="fl_parent", IsForeignKey=true)]
		public tblFlow tblFlow1
		{
			get
			{
				return this._tblFlow1.Entity;
			}
			set
			{
				tblFlow previousValue = this._tblFlow1.Entity;
				if (((previousValue != value) 
							|| (this._tblFlow1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblFlow1.Entity = null;
						previousValue.tblFlow2.Remove(this);
					}
					this._tblFlow1.Entity = value;
					if ((value != null))
					{
						value.tblFlow2.Add(this);
						this._fl_parent = value.fl_id;
					}
					else
					{
						this._fl_parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblFlow1");
				}
			}
		}
		
		[Association(Name="tblIntroducer_tblFlow", Storage="_tblIntroducer", ThisKey="it_id", IsForeignKey=true)]
		public tblIntroducer tblIntroducer
		{
			get
			{
				return this._tblIntroducer.Entity;
			}
			set
			{
				tblIntroducer previousValue = this._tblIntroducer.Entity;
				if (((previousValue != value) 
							|| (this._tblIntroducer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblIntroducer.Entity = null;
						previousValue.tblFlow.Remove(this);
					}
					this._tblIntroducer.Entity = value;
					if ((value != null))
					{
						value.tblFlow.Add(this);
						this._it_id = value.it_id;
					}
					else
					{
						this._it_id = default(int);
					}
					this.SendPropertyChanged("tblIntroducer");
				}
			}
		}
		
		[Association(Name="tblReceive_tblFlow", Storage="_tblReceive", ThisKey="rc_id", IsForeignKey=true)]
		public tblReceive tblReceive
		{
			get
			{
				return this._tblReceive.Entity;
			}
			set
			{
				tblReceive previousValue = this._tblReceive.Entity;
				if (((previousValue != value) 
							|| (this._tblReceive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblReceive.Entity = null;
						previousValue.tblFlow.Remove(this);
					}
					this._tblReceive.Entity = value;
					if ((value != null))
					{
						value.tblFlow.Add(this);
						this._rc_id = value.rc_id;
					}
					else
					{
						this._rc_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblReceive");
				}
			}
		}
		
		[Association(Name="tblReply_tblFlow", Storage="_tblReply", ThisKey="rp_id", IsForeignKey=true)]
		public tblReply tblReply
		{
			get
			{
				return this._tblReply.Entity;
			}
			set
			{
				tblReply previousValue = this._tblReply.Entity;
				if (((previousValue != value) 
							|| (this._tblReply.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblReply.Entity = null;
						previousValue.tblFlow.Remove(this);
					}
					this._tblReply.Entity = value;
					if ((value != null))
					{
						value.tblFlow.Add(this);
						this._rp_id = value.rp_id;
					}
					else
					{
						this._rp_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblReply");
				}
			}
		}
		
		[Association(Name="tblMaintain_tblFlow", Storage="_tblMaintain", ThisKey="mt_id", IsForeignKey=true)]
		public tblMaintain tblMaintain
		{
			get
			{
				return this._tblMaintain.Entity;
			}
			set
			{
				tblMaintain previousValue = this._tblMaintain.Entity;
				if (((previousValue != value) 
							|| (this._tblMaintain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblMaintain.Entity = null;
						previousValue.tblFlow.Remove(this);
					}
					this._tblMaintain.Entity = value;
					if ((value != null))
					{
						value.tblFlow.Add(this);
						this._mt_id = value.mt_id;
					}
					else
					{
						this._mt_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblMaintain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblFlow2(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblFlow1 = this;
		}
		
		private void detach_tblFlow2(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblFlow1 = null;
		}
	}
	
	[Table(Name="dbo.tblMaintain")]
	public partial class tblMaintain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mt_id;
		
		private int _ml_id;
		
		private int _op_id;
		
		private System.DateTime _mt_pose_dt;
		
		private System.DateTime _mt_create_dt;
		
		private System.DateTime _mt_begin_dt;
		
		private System.DateTime _mt_timeout_dt;
		
		private string _mt_location;
		
		private string _mt_content;
		
		private string _mt_remark;
		
		private string _mt_fee_info;
		
		private EntitySet<tblFlow> _tblFlow;
		
		private EntityRef<tblMaintainLevel> _tblMaintainLevel;
		
		private EntityRef<tblOperator> _tblOperator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmt_idChanging(int value);
    partial void Onmt_idChanged();
    partial void Onml_idChanging(int value);
    partial void Onml_idChanged();
    partial void Onop_idChanging(int value);
    partial void Onop_idChanged();
    partial void Onmt_pose_dtChanging(System.DateTime value);
    partial void Onmt_pose_dtChanged();
    partial void Onmt_create_dtChanging(System.DateTime value);
    partial void Onmt_create_dtChanged();
    partial void Onmt_begin_dtChanging(System.DateTime value);
    partial void Onmt_begin_dtChanged();
    partial void Onmt_timeout_dtChanging(System.DateTime value);
    partial void Onmt_timeout_dtChanged();
    partial void Onmt_locationChanging(string value);
    partial void Onmt_locationChanged();
    partial void Onmt_contentChanging(string value);
    partial void Onmt_contentChanged();
    partial void Onmt_remarkChanging(string value);
    partial void Onmt_remarkChanged();
    partial void Onmt_fee_infoChanging(string value);
    partial void Onmt_fee_infoChanged();
    #endregion
		
		public tblMaintain()
		{
			this._tblFlow = new EntitySet<tblFlow>(new Action<tblFlow>(this.attach_tblFlow), new Action<tblFlow>(this.detach_tblFlow));
			this._tblMaintainLevel = default(EntityRef<tblMaintainLevel>);
			this._tblOperator = default(EntityRef<tblOperator>);
			OnCreated();
		}
		
		[Column(Storage="_mt_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mt_id
		{
			get
			{
				return this._mt_id;
			}
			set
			{
				if ((this._mt_id != value))
				{
					this.Onmt_idChanging(value);
					this.SendPropertyChanging();
					this._mt_id = value;
					this.SendPropertyChanged("mt_id");
					this.Onmt_idChanged();
				}
			}
		}
		
		[Column(Storage="_ml_id", DbType="Int NOT NULL")]
		public int ml_id
		{
			get
			{
				return this._ml_id;
			}
			set
			{
				if ((this._ml_id != value))
				{
					if (this._tblMaintainLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onml_idChanging(value);
					this.SendPropertyChanging();
					this._ml_id = value;
					this.SendPropertyChanged("ml_id");
					this.Onml_idChanged();
				}
			}
		}
		
		[Column(Storage="_op_id", DbType="Int NOT NULL")]
		public int op_id
		{
			get
			{
				return this._op_id;
			}
			set
			{
				if ((this._op_id != value))
				{
					if (this._tblOperator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onop_idChanging(value);
					this.SendPropertyChanging();
					this._op_id = value;
					this.SendPropertyChanged("op_id");
					this.Onop_idChanged();
				}
			}
		}
		
		[Column(Storage="_mt_pose_dt", DbType="DateTime NOT NULL")]
		public System.DateTime mt_pose_dt
		{
			get
			{
				return this._mt_pose_dt;
			}
			set
			{
				if ((this._mt_pose_dt != value))
				{
					this.Onmt_pose_dtChanging(value);
					this.SendPropertyChanging();
					this._mt_pose_dt = value;
					this.SendPropertyChanged("mt_pose_dt");
					this.Onmt_pose_dtChanged();
				}
			}
		}
		
		[Column(Storage="_mt_create_dt", DbType="DateTime NOT NULL")]
		public System.DateTime mt_create_dt
		{
			get
			{
				return this._mt_create_dt;
			}
			set
			{
				if ((this._mt_create_dt != value))
				{
					this.Onmt_create_dtChanging(value);
					this.SendPropertyChanging();
					this._mt_create_dt = value;
					this.SendPropertyChanged("mt_create_dt");
					this.Onmt_create_dtChanged();
				}
			}
		}
		
		[Column(Storage="_mt_begin_dt", DbType="DateTime NOT NULL")]
		public System.DateTime mt_begin_dt
		{
			get
			{
				return this._mt_begin_dt;
			}
			set
			{
				if ((this._mt_begin_dt != value))
				{
					this.Onmt_begin_dtChanging(value);
					this.SendPropertyChanging();
					this._mt_begin_dt = value;
					this.SendPropertyChanged("mt_begin_dt");
					this.Onmt_begin_dtChanged();
				}
			}
		}
		
		[Column(Storage="_mt_timeout_dt", DbType="DateTime NOT NULL")]
		public System.DateTime mt_timeout_dt
		{
			get
			{
				return this._mt_timeout_dt;
			}
			set
			{
				if ((this._mt_timeout_dt != value))
				{
					this.Onmt_timeout_dtChanging(value);
					this.SendPropertyChanging();
					this._mt_timeout_dt = value;
					this.SendPropertyChanged("mt_timeout_dt");
					this.Onmt_timeout_dtChanged();
				}
			}
		}
		
		[Column(Storage="_mt_location", DbType="NVarChar(1000)")]
		public string mt_location
		{
			get
			{
				return this._mt_location;
			}
			set
			{
				if ((this._mt_location != value))
				{
					this.Onmt_locationChanging(value);
					this.SendPropertyChanging();
					this._mt_location = value;
					this.SendPropertyChanged("mt_location");
					this.Onmt_locationChanged();
				}
			}
		}
		
		[Column(Storage="_mt_content", DbType="NVarChar(1000)")]
		public string mt_content
		{
			get
			{
				return this._mt_content;
			}
			set
			{
				if ((this._mt_content != value))
				{
					this.Onmt_contentChanging(value);
					this.SendPropertyChanging();
					this._mt_content = value;
					this.SendPropertyChanged("mt_content");
					this.Onmt_contentChanged();
				}
			}
		}
		
		[Column(Storage="_mt_remark", DbType="NVarChar(1000)")]
		public string mt_remark
		{
			get
			{
				return this._mt_remark;
			}
			set
			{
				if ((this._mt_remark != value))
				{
					this.Onmt_remarkChanging(value);
					this.SendPropertyChanging();
					this._mt_remark = value;
					this.SendPropertyChanged("mt_remark");
					this.Onmt_remarkChanged();
				}
			}
		}
		
		[Column(Storage="_mt_fee_info", DbType="NVarChar(1000)")]
		public string mt_fee_info
		{
			get
			{
				return this._mt_fee_info;
			}
			set
			{
				if ((this._mt_fee_info != value))
				{
					this.Onmt_fee_infoChanging(value);
					this.SendPropertyChanging();
					this._mt_fee_info = value;
					this.SendPropertyChanged("mt_fee_info");
					this.Onmt_fee_infoChanged();
				}
			}
		}
		
		[Association(Name="tblMaintain_tblFlow", Storage="_tblFlow", OtherKey="mt_id")]
		public EntitySet<tblFlow> tblFlow
		{
			get
			{
				return this._tblFlow;
			}
			set
			{
				this._tblFlow.Assign(value);
			}
		}
		
		[Association(Name="tblMaintainLevel_tblMaintain", Storage="_tblMaintainLevel", ThisKey="ml_id", IsForeignKey=true)]
		public tblMaintainLevel tblMaintainLevel
		{
			get
			{
				return this._tblMaintainLevel.Entity;
			}
			set
			{
				tblMaintainLevel previousValue = this._tblMaintainLevel.Entity;
				if (((previousValue != value) 
							|| (this._tblMaintainLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblMaintainLevel.Entity = null;
						previousValue.tblMaintain.Remove(this);
					}
					this._tblMaintainLevel.Entity = value;
					if ((value != null))
					{
						value.tblMaintain.Add(this);
						this._ml_id = value.ml_id;
					}
					else
					{
						this._ml_id = default(int);
					}
					this.SendPropertyChanged("tblMaintainLevel");
				}
			}
		}
		
		[Association(Name="tblOperator_tblMaintain", Storage="_tblOperator", ThisKey="op_id", IsForeignKey=true)]
		public tblOperator tblOperator
		{
			get
			{
				return this._tblOperator.Entity;
			}
			set
			{
				tblOperator previousValue = this._tblOperator.Entity;
				if (((previousValue != value) 
							|| (this._tblOperator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblOperator.Entity = null;
						previousValue.tblMaintain.Remove(this);
					}
					this._tblOperator.Entity = value;
					if ((value != null))
					{
						value.tblMaintain.Add(this);
						this._op_id = value.op_id;
					}
					else
					{
						this._op_id = default(int);
					}
					this.SendPropertyChanged("tblOperator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblMaintain = this;
		}
		
		private void detach_tblFlow(tblFlow entity)
		{
			this.SendPropertyChanging();
			entity.tblMaintain = null;
		}
	}
}
#pragma warning restore 1591
